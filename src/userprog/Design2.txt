+--------------------------+
|         CIS 520          |
| PROJECT 2: USER PROGRAMS |
|     DESIGN DOCUMENT      |
+--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Lev Kavs
Mitchell Slavens
Sam Moylan

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

  - http://www.scs.stanford.edu/19wi-cs140/pintos/pintos_3.html#SEC32
  - https://github.com/ryantimwilson/Pintos-Project-2
  - https://github.com/Waqee/Pintos-Project-2


ARGUMENT PASSING
================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  Added #include "threads/malloc.h" - this allows us to use the malloc() call to allocate
memory for objects we used.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

  Argument parsing/passing starts in process_execute where the file_name/function is given to the newly created
thread. The file_name can contain arguments and strtok_r() is used to extract the name from the arguments and
only the function name is passed to the thread. When start_process() is called the full file_name, function name
and arguments, are passed. The filename is extracted from file_name into a pointer and the file is opened. 
After that, the stack pointer and file_name are passed to setup_stack)(). 

After the page allocation and installation we create our argv array and other variables. We loop through
the file_name/function name and the arguments copying each into a location on the stack. This is done
with the stack pointer 'esp' by subtracting from it the length of each string and copying the string into the
new memory location pointed to by 'esp'. Each memory location that was copied to is then placed into the 'argv'
array, index 0 being the function name and the parameters following after from left to right. For example, 'echo a b c'
is to be placed on the stack by placing 'echo' first and it's memory location pointed to by 'esp' into argv[0]. Then,
'a' is placed on the stack and it's memory location placed into argv[1], 'b' is then placed on the stack and it's
memory location placed into argv[2] and so forth, so the order is left-to-right. When the final argument is placed
on the stack the stack is aligned to the next frame. Next the argv array is looped through from right-to-left order
placing the memory location of the current index onto the stack with memcpy(). Argc, the variable holding the number
of entries in argv, is placed on the stack next. 

We ensure that we do not overflow the stack page by moving the stack pointer by the number of bytes of the argument 
we are placing onto the stack. We also insert a NULL terminator at the end of the last argument to prevent access 
beyond the stack.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses a static buffer so it is not thread safe. If multiple
threads try to use this function they will utilize the same buffer.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. Letting the shell handle the separation means less work for the Kernel. 
2. From a security perspective, the less user-controlled variables being passed
to the Kernel, the better. This is because the Kernel is basically all powerful 
so the more shielded it can be from users the better. 

SYSTEM CALLS
============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h changes:
struct thread * parent - handler to the parent thread.
struct list child_list - list of the children of this thread.
int exit_code - the exit code when the thread is terminated. 
tid_t wait_thread - the tid of the thread being waited for.
struct semaphore child_sema - the semaphore used for waiting on a child.
struct file *self_file - the thread's own file.
struct list file_list - list of files referenced by this thread.
int fd_cnt - the number of open files.
bool success - this is set based on whether or not a child process is successfully loaded.

struct child
{
	tid_t tid; - tid of child thread
	struct list_elem elem; - for iteration of the list.
	int exit_code; - the exit code of the child thread.
	bool dead; - set to true if the child is terminated. 
}

in thread.c:
struct lock file_lock - used to lock the file system.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

They are unique to the process itself. When a process opens a file, it 
sets the file descriptor of the file to the next file descriptor which is
incremented per file opened. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

For SYS_WRITE we get the three parameters, the file descriptor, the buffer 
to write to, and the number of bytes to write. If the file descriptor is 1,
we write to the console. Otherwise we find the file descriptor in our list of
files and then we file_write to it. We always use the file_lock whenever writing
to a file. 

For SYS_READ, we get our three parameters, the file descriptor, the buffer to 
write to, and the number of bytes to write. If the file descriptor is 0, we get
user input from the input buffer. Otherwise we search our list of files and read from
the file matching the file descriptor. Again we lock whenever we read.  

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our wait system call calls process_wait with the tid of the child that our
current thread wants to wait on. Then, if the child is found in the child list, 
we set the wait_thread of the current thread to the child's tid. Otherwise we return
-1 which specifies an error. Then, assuming no error, we check if the child is dead,
and if it is not we block the current thread by calling sema_down on the child_sema. 

When sema_up is called, we remove the child from the child_list and we return the 
exit_code of the child that just finished executing. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

SURVEY QUESTIONS
================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
